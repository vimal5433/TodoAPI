name: todolist.$(BuildID)
trigger:
 branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
      - job: build
        pool:
         vmImage: 'ubuntu-latest'
        variables:
          solution: '**/*.sln'
          buildPlatform: 'Any CPU'
          buildConfiguration: 'Release'

        steps:
         
         - task: DotNetCoreCLI@2
           inputs:
             command: 'restore'
             projects: 'ToDoList.csproj'
             feedsToUse: 'select'
         
         - task: DotNetCoreCLI@2
           inputs:
            command: 'build'
            projects: 'ToDoList.csproj'
         - task: DotNetCoreCLI@2
           inputs:
             command: 'publish'
             publishWebProjects: false
             projects: 'ToDoList.csproj'
             arguments: '--output $(Build.ArtifactStagingDirectory)'
             zipAfterPublish: false
             modifyOutputPath: false
         - task: DotNetCoreCLI@2
           inputs:
              command: 'custom'
              custom: 'new'
              arguments: 'tool-manifest'
         - task: DotNetCoreCLI@2
           inputs:
             command: 'custom'
             custom: 'tool'
             arguments: 'install --global dotnet-ef'
        
         - task: DotNetCoreCLI@2
           inputs:
             command: 'custom'
             custom: 'ef'
             arguments: 'database update'
          
         - task: PublishBuildArtifacts@1
           inputs:
             PathtoPublish: '$(Build.ArtifactStagingDirectory)'
             ArtifactName: 'drop'
             publishLocation: 'Container'
        #  - task: DockerInstaller@0
        #    inputs:
        #     dockerVersion: '17.09.0-ce'
        #  - task: Docker@2
        #    inputs:
        #      containerRegistry: 'acr'
        #      repository: 'todolist'
        #      command: 'build'
        #      Dockerfile: '**/Dockerfile'
        #      tags: |
        #        $(Build.BuildId)
        #  - task: Docker@2
        #    inputs:
        #      containerRegistry: 'acr'
        #      repository: 'todolist'
        #      command: 'push'
        #      tags: |
        #        $(Build.BuildId)

  - stage: Deploy
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/feature'))
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature')))
    displayName: DevDeploy
    dependsOn: Build
    jobs:
      - deployment: App_service_deploy
        displayName: App_service_deploy
        workspace:
          clean: all
        pool:
           vmImage: 'ubuntu-latest'
        environment:
            name: app-dev-env

        strategy:
         runOnce:
           deploy:
             steps:
             
              - task: DownloadBuildArtifacts@1
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: 'drop'
                  downloadPath: '$(System.ArtifactsDirectory)'
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'Pay-As-You-Go(392d0d74-9c03-41db-8410-e1951d81c41e)'
                  appType: 'webAppLinux'
                  WebAppName: 'Satest123'
                  packageForLinux: '$(System.ArtifactsDirectory)/drop'
                  RuntimeStack: 'DOTNETCORE|3.1'